{"name":"Funshapes","tagline":"Editor 2D graphical  objects <C++/Qt5>","body":"## 1.\tОписание\r\n\r\n**Редактор** написан на языке C++ с использованием кроссплатформы Qt5. Он может служить шаблоном для начинающих программистов использующих Qt для создания собственных программ использующих 2D графику. В коде программы можно найти примеры:\r\n\r\n1.\tКласса <**QSignalMapper**> как коммутатора событий/сигналов возникающих в программе\r\n2.\tЗапись в файл, чтение из файла <**QFile**, **QFileDialog**, **QTextStream**>\r\n3.\tСоздание собственного контексного меню <**QMenu**>\r\n4.\tРеализация механизма отмены/восстановления произведённых пользователем действий (**Undo/Redo**). Он же может быть использован для автоматизации действий программы - запись/воспроизведение макросов, анимация.\r\n5.\tТрансформации графического вида сцены/объектов (масштаб, вращение) <**QTransform**>\r\n6.\tРабота с видом сцены <**QGraphicsView**> преобразование координат (**mapFrom…**)\r\n7.\tРисование с использованием <**QPainterPath**>\r\n8.\tПереопределение метода **_paint()_** объекта для управления процессом отрисовки (использование градиентной заливки, “подсветки” , определение порядка отрисовки пересекающихся объектов, управление масштабом рисования) <**QPainter**>\r\n9.\tПреобразование бинарных данных в **Base64** и обратно <**QString**, **QByteArray**>\r\n10.\tВыделение нескольких объектов мышью <**Rubber Band Region**>\r\n\r\n**Редактор** позволяет создавать и редактировать встроенные типы объектов, такие как:\r\n\r\n1.\tТреугольник\r\n2.\tПрямоугольник\r\n3.\tКруг\r\n4.\tТекст\r\n5.\tРисунок\r\n\r\nУ **объектов** могут быть изменены следующие параметры:\r\n\r\n1.\tПоложение\r\n2.\tГеометрия (для объектов “Рисунок”/”Текст” изображение/текст масштабируется под объект)\r\n3.\tОриентация (угол наклона по оси Z)\r\n4.\tЦвет (кроме объекта “Рисунок”)\r\n5.\tВстроенный текст объекта а также шрифт, размер и цвет этого текста (кроме объекта “Текст”)\r\n\r\n**Сцена** поддерживает работу с буфером обмена (**Cut/Copy/Paste**) и обладает механизмом отмены/восстановления изменений объектов (**Undo/Redo**). Состояние сцены с объектами и все их параметры (включая изображения объектов “Рисунок”) могут быть сохранены в файл. Файл сцены является простым текстовым файлом где сцена, объекты и их параметры описываются в **XML** формате.\r\n\r\n## 2.    Архитектура и классы\r\n\r\nОсновные классы программы:\r\n\r\n1.\t**CScene** (унаследован от **QGraphicsScene**)\r\n2.\t**CGraphObject** (унаследован от **QGraphicsObject**)\r\n3.\t**CUndoRedo** (унаследован от **QObject**)\r\n4.\t**CXMLParser** (унаследован от **QXmlDefaultHandler**)\r\n\r\n![](https://raw.githubusercontent.com/JohnMcLaren/FunShapes/master/etc/1.png)\r\n\r\n### CScene \r\n\r\nКласс сцены ‘**CScene**’ унаследован от ‘QGraphicsScene’ и как графический объект представляет из себя бесконечное математическое поле с центром в точке <0, 0>. ‘QGraphicsScene’ не имеет своего средства отображения. Поэтому, для отображения содержимого сцены создаётся дополнительный класс ‘ViewScene’ который является наследником ‘QGraphicsView’ и выполняет функцию “окна просмотра” сцены. Все действия по перемещению по сцене и её масштабирование выполняются именно посредством ‘ViewScene’.\r\nВ логике программы сцена занимает центральное место и является контейнером для находящихся на ней объектов ‘**CGraphObject**’. Именно сцена первой принимает команды пользователя от главного окна и после обработки запроса вызывает соответствующий метод объекта. Она же ведёт историю изменений параметров объектов используя класс ‘**CUndoRedo**’ как стек хранения записей производимых с объектом действий и вызывает по команде пользователя методы этого класса для отмены/восстановления изменённых параметров объекта/объектов. \r\nСоздание объекта на сцене сводится к передаче текстовой строки описывающей объект в xml-формате методу createObject() сцены где она разбирается и определённые параметры передаются в конструктор объекта ‘**CGraphObject**’. Для разбора этой строки в параметры соответствующих типов сцена использует класс ‘**CXMLParser**’.\r\n\r\nГрафическая модель сцены\r\n\r\n![](https://raw.githubusercontent.com/JohnMcLaren/FunShapes/master/etc/2.png)\r\n\r\n### CGraphObject\r\n\r\nКласс **CGraphObject** унаследован от <**QGraphicsObject**> и поэтому уже имеет встроенные методы взаимодействия с пользователем (реакция на мышь и кнопки) и другими объектами на сцене (слои отображения, вычисление пересечений), а также свой метод отрисовки себя на сцене - _**paint()**_.\r\nСоздание объекта начинается с подбора контура от запрошенного (аргумент **type** конструктора) из имеющихся(группа функций вида **get...Path()**). Если метод отрисовки запрошенной фигуры имеется, далее к создаваемому объекту применяются остальные переданные в конструктор параметры.\r\n```\r\nCGraphObject\r\n(const QString type,    // один из допустимых типов объекта\r\nconst QString name,    // уникальное имя объекта на сцене\r\nconst qreal x,        // координата X\r\nconst qreal y,        // координата Y\r\nconst qreal z,        // координата Z (слой объекта)\r\nconst qreal width,    // ширина\r\nconst qreal height,    // высота\r\nconst qreal angle,    // угол наклона объекта\r\nconst DWORD color,    // цвет заливки объекта\r\nconst QString text,    // встроенный текст объекта\r\nQString textfont,        // далее параметры этого текста\r\nDWORD textsize,\r\nconst DWORD textcolor,\r\nconst QString image,    // картинка под объект “Рисунок” в формате Base64\r\nDWORD *scenemode)    // указатель на переменную сцены (текущий режим редактирования объектов Геометрия/Вращение)\r\n```\r\n![](https://raw.githubusercontent.com/JohnMcLaren/FunShapes/master/etc/3.png)\r\n![](https://raw.githubusercontent.com/JohnMcLaren/FunShapes/master/etc/4.png)\r\n\r\n### CUndoRedo\r\n\r\nВ основе класса лежит самоуправляемый массив (стек) текстовых строк описывающих изменения произошедшие на сцене. Доступ к стеку извне разрешён только посредством методов класса CUndoRedo. Класс сам переопределяет размер стека под новые записи при добавлении их методом push и управляет индексом текущей записи при извлечении записей методами popUndo/popRedo.\r\nГрафически работу стека можно предоставить так\r\n\r\n![](https://raw.githubusercontent.com/JohnMcLaren/FunShapes/master/etc/5.png)\r\n\r\nТаким образом самому классу хранящего историю изменений абсолютно безразлично какие объекты и как менялись. Для него любое новое изменение это всего лишь строка содержащая запись об этом, что облегчает реализацию механизма Undo/Redo в любой программе которой он потребуется. При переносе этого механизма в другую программу достаточно просто переписать движок разбора макро-записей UndoRedoEngine()  под требуемые задачи. \r\nФормат макро-записи произвольный, но для FunShapes я выбрал следующий:\r\n<имя объекта, действие, параметры действия ... ;> , например\r\n\"Triangle1, ColorChange, 16711680;\"  - что в будущем при извлечении из стека будет воспринято движком UndoRedoEngine() как указание - “изменить цвет объекта Triangle1 на красный (0xFF0000)”.\r\nЕдиничная запись об одном изменении одного объекта заканчивается символом <;> (точка с запятой) затем может следовать следующая запись возможно об изменении другого объекта. Таким образом, в одну стековую макро-запись/строку можно вложить информацию о множественных изменениях за одно действие пользователя, скажем групповое перемещение, изменение цвета и т.д.. \r\nПорядок обработки макро-записи (определен в ловушках Undo/Redo команд) - при Undo от последней к первой (обратный), при Redo от первой к последней (прямой).\r\n\r\n### CXMLParser \r\n\r\nЕдинственное назначение класса, разбор текстовой строки в xml-формате с заполнением соответствующих полей структуры стандартных атрибутов объекта STD_ATTR.\r\n\r\ntypedef struct _STD_ATTR_\r\n{\r\n    int        id;\r\n    QString        tag;\r\n    QString        name;\r\n    QString        type;\r\n    QString        shape;\r\n    qreal        x;\r\n    qreal        y;\r\n    qreal        z;\r\n    qreal        width;\r\n    qreal        height;\r\n    qreal        top;\r\n    qreal        left;\r\n    qreal        angle;\r\n    DWORD    color;\r\n    QString        text;\r\n    QString        textfont;\r\n    DWORD    textcolor;\r\n    QString        image;\r\n    qreal        value;\r\n    bool        clipboard;\r\n}STD_ATTR;\r\n\r\n\r\n\r\n","google":"UA-58686535-1","note":"Don't delete this file! It's used internally to help with page regeneration."}